# This module was autogenerated by generate_simpleapi.py.  Do not edit as
# changes will be lost
from __future__ import (absolute_import, division, print_function,
                        unicode_literals)

from . import lhs
from . import utils


# This function was autogenerated by generate_simpleapi.py.  Do not edit as
# changes will be lost
def Rebin(InputWorkspace, Params, PreserveEvents=None, FullBinsOnly=None, IgnoreBinErrors=None, Version=1, StartProgress=0.0, EndProgress=1.0,
          EnableLogging=True, StoreInADS=True):
    """
Rebins data with new X bin boundaries. For EventWorkspaces, you can very quickly rebin in-place by keeping the same output name and PreserveEvents=true.

Property descriptions: 

InputWorkspace(Input:req) *MatrixWorkspace*       Workspace containing the input data

OutputWorkspace(Output:req) *MatrixWorkspace*       The name to give the output workspace

Params(Input:req) *dbl list*       A comma separated list of first bin boundary, width, last bin boundary. Optionally this can be followed by a comma and more widths and last boundary pairs. Optionally this can also be a single number, which is the bin width. In this case, the boundary of binning will be determined by minimum and maximum TOF values among all events, or previous binning boundary, in case of event Workspace, or non-event Workspace, respectively. Negative width values indicate logarithmic binning. 

PreserveEvents(Input) *boolean*       Keep the output workspace as an EventWorkspace, if the input has events. If the input and output EventWorkspace names are the same, only the X bins are set, which is very quick. If false, then the workspace gets converted to a Workspace2D histogram.

FullBinsOnly(Input) *boolean*       Omit the final bin if it's width is smaller than the step size

IgnoreBinErrors(Input) *boolean*       Ignore errors related to zero/negative bin widths in input/output workspaces. When ignored, the signal and errors are set to zero

    """
    algm = utils.create_algorithm("Rebin", Version, StartProgress, EndProgress,
                                  EnableLogging, StoreInADS)

    # figure out LHS stuff
    # lhs = lhs.lhs_info()
    # lhs_args = _get_args_from_lhs(lhs, algm)
    # final_keywords = _merge_keywords_with_lhs(kwargs, lhs_args)
    lhs = (0, [])

    set_properties(algm, *args, **final_keywords)
    algm.execute()
    return utils.gather_returns(Rebin, lhs, algm)
