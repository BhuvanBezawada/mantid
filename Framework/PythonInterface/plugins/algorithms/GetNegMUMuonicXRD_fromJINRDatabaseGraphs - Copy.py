from __future__ import (absolute_import, division, print_function)
from mantid.api import * # PythonAlgorithm, registerAlgorithm, WorkspaceProperty
from mantid.kernel import *
from mantid.simpleapi import *

#pylint: disable=no-init


class GetNegMuMuonicXRD(PythonAlgorithm):
    #Dictionary of <element>:<peaks> easily extendible by user.
    muonic_xr ={#below is off a graph so not as acurate 
                'C'  :[15,60,80,100,125,400,515], 
				'N'  :[101.9,121,128.1,131.2],
				'O'  :[18,26,31,76,90,95,135,158,178,180,182],
				'F'  :[109,175,215,230,267,539,915,1623,2051],
				'Ne' :[95,100,105,135,175,210,305,545,700,865,1070,1205,1340,1455,1670],
				'Na' :[45,125,190,230,280,315,320,340,345,1285,1970],
				'Mg' :[100,110,205,310,360,420,440,745,830,1320],
				'Al' :[90,110,205,400,480,485,500,935,1115,1860,2540],
				'Si' :[85,105,395,455,520,830,925,1025,1655,1830,2205],
				'P'  :[95,130,165,340,475,580,625,1250,2240,3520],
				'S'  :[95,125,340,510,600,660,665,1305,2260],
				'Cl' :[70,90,100,115,145,265,345,550,620,695,1090,2145],
				'Ar' :[85,93,102,117,130,172,185,207,340],
				'K'  :[90,120,250,280,315,350,740,880,955,1615,2170],
				'Ca' :[65,95,100,200,250,1075,1285,2190,2515,2720,3010],
				'Ti' :[50,110,140,155,200,345,390,965,1135,1455,1460],
				'V'  :[65,115,120,235,285,300,700,1000,1135,1345,1395,1485,1580],
				'Cr' :[205,210,250,305,340,370,410,420,440,1105,1265,1320,1445],
				'Mn' :[90,135,140,305,380,435,890,1185,1455,1500,1590,1595,1600],
                'Fe' :[95,100,125,135,265,345,420,1070,1265,1645,1700,1765],
                'Co' :[75,100,150,155,160,290,370,405,420,580,850,1435,1645,1730,1890],
                'Ni' :[90,125,195,200,250,310,405,430,440,450,670,870,1095,1430,1720,1810,1960,1965,1970],
                'As' :[110,115,160,180,245,280,295,480,550,645,1880,2285,2630],
                'Au' :[130,380,595,890,2360,2490,4740,5080,5270,5670,5860],
                'Ag' :[85,170,340,530,870,1150,2185,3210,4040,4750],
                'Cu' :[100,110,160,290,390,460,485,875,1015,1625,1820,2195],
                'Sr' :[110,120,145,170,200,275,360,400,550,720,1310,1840,2345,2350,2895,3115,3200,3350],
                'Y'  :[95,105,200,215,250,290,320,550,565,865,910,1020,1430,1890,1970,2430,3040,3560],
                'Zr' :[50,70,100,110,180,200,245,350,375,460,730,840,850,920,1235,1540,1700,2010,2560,2135,3325,3680],
                'Nb' :[105,110,150,250,320,365,475,530,640,650,655,885,980,1015,1240,1630,1730,2110,2115,2630,2660,2675,3295,3800],
                'Mo' :[45,145,185,265,375,390,400,465,500,685,700,705,710,890,930,1045,1160,1310,1680,2210,2705,3475,3630,3960],
                'Rh' :[105,110,120,140,180,200,250,300,380,415,645,830,840,1040,1120,1470,1980,1990,2450,2485,2970,2990,3245,3780,3900,4045,4470],
                'Pd' :[105,125,185,240,300,410,495,505,875,895,1155,1190,1245,1300,1320,1340,1475,2015,2080,2430,2450,3045,3090,3420,3915,4460],
                'Cd' :[130,135,160,195,225,305,480,490,500,885,910,1195,1230,1325,1365,1400,1500,2220,2245,2780,2810,3230,3390,3650,4190,4500,4890],
                'In' :[85,100,170,200,285,345,350,390,400,420,770,960,1000,1260,1320,2305,2345,2830,2890,3350,3390,3800,4300,5050],
                'Sn' :[70,190,230,260,290,350,465,505,730,970,1020,1310,1350,1485,1540,1590,2375,2420,2850,2960,3370,3490,3920,4450,4790,5230],
                'Sb' :[90,100,150,190,210,290,340,480,500,550,590,1020,1065,1145,1160,1200,1350,1430,1550,2605,2670,2980,3030,3450,3580,4050,4560,4960,5360],
                'Te' :[110,130,150,180,200,245,320,325,360,420,430,450,510,835,1055,1120,1450,1500,2630,2680,3030,3120,3530,3680,4775,5520],
                'I'  :[75,85,140,170,180,200,290,355,500,520,540,545,625,700,850,1090,1135,1470,1640,1720,2740,2790,3240,3320,3750,3890,4285,4850,5720],
                'Cs' :[90,100,145,160,205,295,390,420,500,565,600,650,655,720,730,780,1200,1250,1605,1680,1750,1790,2740,2760,3340,3380,3855,3900,4565,5015,5500,6000],
                'Ba' :[85,110,115,130,150,200,265,310,380,470,490,580,630,720,760,800,1220,1275,1655,1695,1850,1930,1990,2880,2970,3410,3490,3950,3995,4695,5250,5780,6230],
                'La' :[60,100,110,135,145,180,190,200,240,305,340,360,370,460,510,560,660,740,760,1250,1345,1440,1720,1780,1970,3015,3065,3495,3560,3960,4070,4745,5370,5700,6350],
                'Ce' :[50,80,110,135,145,200,225,250,305,380,450,470,505,605,675,755,1345,1420,1790,1855,1990,2075,2100,3065,3120,3575,3660,4085,4160,4950,5480,5920,6520],
                'Pr' :[105,110,120,130,150,155,175,200,215,320,495,500,510,590,650,655,670,690,820,1360,1420,1560,1745,1870,1950,2040,2120,3150,3255,3670,3730,4180,4270,5120,5630,6230,6680],
                'Nd' :[50,100,110,115,155,180,200,205,300,355,455,460,550,700,740,990,,1400,1475,1950,1980,3245,3290,3785,3885,4380,4385,4450,5250,5760],
                'Hg' :[100,115,145,200,310,400,435,500,530,605,795,890,930,1295,1320,1900,2340,2385,2560,3240,3450,4760,4820,5555,5780,5930],
                'Tl' :[120,125,165,180,200,270,320,385,405,500,510,645,720,880,920,1120,1250,1345,1460,1945,1980,2000,2100,2345,2360,2780,3320,3435,3810,4710,4920,5200,5345,5630,5950,7790,7440,8320],
                'Zn' :[40,60,85,110,160,210,215,250,360,495,505,515,1460,1590,1940,2035,2060,2085,2130],
                'Pb' :[90,100,105,235,405,480,660,790,885,950,980,1290,1345,1390,1425,1705,2000,2120,2560,2580,2850,3420,3610,4780,4975,5280,5450,5730,5920,7965,8420,8485],
                'Bi' :[100,105,130,260,375,470,495,570,590,695,780,980,1000,1130,1430,1460,1525,1645,2015,2185,2475,2560,2645,2675,2735,2990,3500,3685,3965,4865,5050,5365,5550,5730,6070],

				
				'Sc' :[60,100,110,115,150,200,210,220,245,250,270,290,325,355,400,450,605,665,875,1050,1100,1150,1165,1185,1195,1200],
                'Ga' :[45,100,115,120,130,205,235,250,270,380,500,530,590,600,620,640,655,710,720,870,895,950,995,1055,1100,1145,1250,1320,1715,1805,2000,2130,2180,2230,2250],
                'Ge' :[75,90,150,230,255,280,345,380,400,440,450,500,520,560,700,740,1655,1815,2180,2345,2520],
                'Se' :[100,110,125,165,180,230,280,430,580,620,670,680,700,1960,2470,2740],
                'Br' :[110,120,125,155,170,280,300,450,470,500,535,590,595,670,720,890,1000,1680,1685,2040,2530,2705,2780,2820,2900],
                'Rb' :[90,100,180,230,135,260,280,300,310,320,480,500,535,695,710,730,850,890,915,945,1020,1260,1760,2340,2355,2870,2980,3250],
                'Ru' :[95,110,155,210,250,275,340,390,400,450,500,760,800,1035,1050,1150,1350,1845,2350,2640,2910,3640,4240],
                'Cs' :[110,115,205,230,280,400,475,525,610,680,710,760,790,1170,1230,1545,1635,1800,2860,2890,3365,3400,3850,3910,4565,5090,5500,6030],
                'Ba' :[40,120,130,165,170,190,200,345,460,500,540,515,1235,1325,1675,1710,1850,1900,2000,2920,2990,3415,3500,3980,4000,5170,5655,6295],
                'La' :[65,125,130,150,160,200,320,400,450,500,560,600,675,700,1265,1220,1465,1740,1975,2220,3000,3065,3485,3625,4005,4085,4865,5350,5820,6350]
                'Hf' :[100,110,150,200,260,310,510,885,905,1080,1095,1265,1985,1995,2085,2140,2655,2865,4015,4065,4150,4230,4610,5030,5085,5135,5160,5370],
                'Ta' :[90,95,100,110,215,265,310,385,510,520,720,750,1065,1090,1135,1900,1940,2055,2085,2100,2170,2955,4125,4600,4670,4780,5095,5145,5160,5180,5260,5350,5390],
                'W'  :[95,100,105,110,210,245,310,345,385,405,430,460,645,660,790,800,1145,1160,1265,1350,2000,2080,2160,2190,2230,2260,2865,2980,3105,3345,4265,4365,4535,4605,4705,4765,4985,5285,5345,6430,6970,7430],
                'Re' :[90,100,110,125,150,210,250,265,350,450,675,830,985,1135,1165,2050,2150,2190,2275,2965,3000,4345,4805,4975,5225,5285,5320,5415,5460,6580,7065,7645],
                'Os' :[100,105,120,125,190,200,300,345,520,800,855,1000,2165,2205,2245,4305,4345,4850,5000,5335,5500],
                'Ir' :[85,100,140,190,205,290,320,395,470,490,550,700,805,845,890,1205,1270,2050,2135,2255,2370,3000,3055,3175,4400,4605,4965,5100,5540,5675,7385,7890],
                'Pt' :[125,135,150,275,355,365,395,490,590,600,700,870,900,950,1200,1225,1295,1430,1480,1740,1820,1930,2250,2340,2425,3135,3300,4495,4670,5015,5145,5505,5780],
                'Sm' :[50,65,80,100,120,130,200,250,300,345,510,565,580,590,695,710,1505,1590,2050,2125,3475,3580,3860,3975,4380,4465,4940,5500,5990,6500,6615,6785,7185],
                'Eu' :[65,100,110,115,180,200,230,280,305,385,400,560,565,700,820,825,930,935,1000,1560,1680,1720,2100,2165,3440,3560,3895,3975,4040,4450,4475,4680,5530,6120],
                'Gd' :[75,100,115,160,200,250,395,485,500,550,565,735,740,940,975,1650,1660,1680,1690,1740,1780,1800,2100,2235,3450,3500,3430,3980,4000,4135,4450,4500,5640,5630,6210],
                'Tb' :[90,120,130,145,160,170,265,370,430,460,540,860,870,1550,1600,1700,1760,2230,2300,3540,3560,3590,4065,4125,4205,4530,4570,4590,4650,4710,5240,5810,6305,6965],
                'Ho' :[90,125,130,170,180,210,250,290,445,540,630,640,690,720,750,920,1050,1850,1870,1960,2670,3705,4205,4705,4740,4760,4890,6045],
                'Er' :[100,120,125,135,200,260,300,410,450,650,630,680,930,980,1120,1150,1830,1900,1940,4225,4445,4780,4950,6200,6700],
                'Tm' :[90,100,110,125,200,230,260,300,330,340,350,425,500,550,600,960,980,1865,1930,1980,2000,2405,2460,2490,2640,3845,4000,4060,4340,4360,4870,4910,4950,5010,5080,6305,6840],
                'Yb' :[120,130,145,160,180,280,290,480,500,680,705,990,1000,1850,1900,1980,2000,2605,2810,3005,3905,3965,4125,4390,4400,4510,4870,4950,5000,5100,5900,5945,6465,6950,7940],
                'Lu' :[100,125,130,155,165,250,275,300,440,450,645,675,700,1005,1050,1165,1885,1945,1985,2000,2050,2450,2465,3980,4120,4990,5000,5025,5040,5060,5140,5230,6535,7050,8125],
                'Th' :[120,130,175,200,230,240,300,320,400,435,520,575,645,820,840,1070,1140,1155,1190,1605,1640,1675,1715,2140,2400,2745,2760,2705,2740,2890,3085,3160,3180,5000,5045,5500,5530,5545,5820,5890,5915,6000,6040,6295,6355,6390,6420,8750,9200],
                'Dy' :[75,110,135,150,185,200,215,245,285,470,480,580,600,615,890,905,1000,1205,1600,1620,1670,1700,1710,2230,2400,3605,4100,4150,4690,4730,4800,5405,5920,6455,7030],

				
				
				
				
				

				}

    def PyInit(self):
        self.declareProperty(StringArrayProperty("Elements", values=[],
                                                 direction=Direction.Input))
        self.declareProperty(name="YAxisPosition",
                             defaultValue=-0.001,
                             doc="Position for Markers on the y-axis")
        self.declareProperty(WorkspaceGroupProperty('OutputWorkspace', '', direction=Direction.Output),
                             doc='The output workspace will always be a GroupWorkspaces '
                                 'that will have the workspaces of each'
                                 ' muonicXR workspace created')
        #We sort the lists of x-values from the dictionary here
        #so that mantid can plot the workspaces it produces.
        for key in self.muonic_xr:
            value = self.muonic_xr.get(key)
            self.muonic_xr[key] = sorted(value)

    def get_muonic_xr(self, element):
        #retrieve peak values from dictionary Muonic_XR
        peak_values = self.muonic_xr[element]
        return peak_values

    def validateInput(self):
        issues = dict()

        elements = self.getProperty('Elements').value()
        if elements == "":
            issues["Elements"] = 'No elements have been selected from the periodic table'
        y_axis_position = self.getProperty('YAxisPosition').value()
        if y_axis_position == "":
            issues["YAxisPosition"] = 'No y-shift value has been entered'
        outputworkspace_str = self.getProperty('OutputWorkspace').value()
        if outputworkspace_str == "":
            issues['OutputWorkspace'] = 'No output workspace name has been specified'

        return issues

    def create_muonic_xr_ws(self, element, y_pos):
        #retrieve the values from Muonic_XR
        xr_peak_values = self.get_muonic_xr(element)
        #Calibrate y-axis for workspace
        y_pos_ws = [y_pos]*len(xr_peak_values)
        xvalues = xr_peak_values
        muon_xr_ws = CreateWorkspace(xvalues, y_pos_ws[:])
        RenameWorkspaces(muon_xr_ws, WorkspaceNames="MuonXRWorkspace_"+element)
        return muon_xr_ws

    def category(self):
        return "Muon"

    def PyExec(self):
        elements = self.getProperty("Elements").value
        y_position = self.getProperty("YAxisPosition").value
        workspace_list = [None]*len(elements)
        for idx,element in enumerate(elements):
            curr_workspace = self.create_muonic_xr_ws(element, y_position)
            workspace_list[idx] = curr_workspace

        self.setProperty("OutputWorkspace", GroupWorkspaces(workspace_list))
        self.log().information(str("Created Group: "+ self.getPropertyValue("OutputWorkspace")))

AlgorithmFactory.subscribe(GetNegMuMuonicXRD)
